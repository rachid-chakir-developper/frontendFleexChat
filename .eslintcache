[{"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\index.js":"1","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\App.js":"2","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\reportWebVitals.js":"3","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\offline\\SignIn.js":"4","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\offline\\SignUp.js":"5","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Chat.js":"6","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Messages.js":"7","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\SendForm.js":"8","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\ApolloProvider.js":"9","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\context\\auth.js":"10","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\guards\\GuardRoute.js":"11","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Conversations.js":"12","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\context\\message.js":"13","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Message.js":"14","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Members.js":"15","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Users.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":919,"mtime":1612042919982,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":3901,"mtime":1612023232136,"results":"21","hashOfConfig":"18"},{"size":4554,"mtime":1612025418227,"results":"22","hashOfConfig":"18"},{"size":5344,"mtime":1612138051632,"results":"23","hashOfConfig":"18"},{"size":1932,"mtime":1612135569096,"results":"24","hashOfConfig":"18"},{"size":3062,"mtime":1612140627847,"results":"25","hashOfConfig":"18"},{"size":1569,"mtime":1612023041088,"results":"26","hashOfConfig":"18"},{"size":1262,"mtime":1612023116028,"results":"27","hashOfConfig":"18"},{"size":437,"mtime":1612025083710,"results":"28","hashOfConfig":"18"},{"size":2617,"mtime":1612131868941,"results":"29","hashOfConfig":"18"},{"size":4093,"mtime":1612128620352,"results":"30","hashOfConfig":"18"},{"size":1649,"mtime":1612127455327,"results":"31","hashOfConfig":"18"},{"size":1052,"mtime":1612123175899,"results":"32","hashOfConfig":"18"},{"size":2875,"mtime":1612133848086,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"iashwy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"36"},"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\index.js",[],["77","78"],"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\App.js",["79"],"\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport ApolloProvider from './ApolloProvider'\nimport { AuthProvider } from './context/auth'\nimport { MessageProvider } from './context/message'\nimport GuardRoute from './guards/GuardRoute'\n\nimport SignIn from './offline/SignIn';\nimport SignUp from './offline/SignUp';\nimport Chat from './online/Chat';\n\nfunction App() {\n  return  (<div className=\"App\">\n    <ApolloProvider>\n      <AuthProvider>\n        <Router>\n          <Switch>\n            <GuardRoute path=\"/login\" component={SignIn} guest />\n            <GuardRoute path=\"/register\" component={SignUp} guest />\n            <MessageProvider>\n              <GuardRoute path=\"/\" component={Chat} authenticated  />\n            </MessageProvider>\n          </Switch>\n        </Router>\n      </AuthProvider>\n    </ApolloProvider>\n    </div>);\n}\n\nexport default App;\n","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\reportWebVitals.js",[],"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\offline\\SignIn.js",["80","81"],"import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link as LinkRoute } from \"react-router-dom\";\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport { useAuthDispatch } from '../context/auth'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($email: String! $password: String!){\r\n    login(input: {email : $email, password: $password}) {\r\n      name\r\n      email\r\n      token\r\n    }\r\n  }\r\n`\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n  const [loginForm, setLoginForm] = useState({\r\n    email: '',\r\n    password: '',\r\n  })\r\n  const [errors, setErrors] = useState({})\r\n  const dispatch = useAuthDispatch()\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    onError: (err) => setErrors(err?.graphQLErrors[0]?.extensions?.errors),\r\n    onCompleted(data) {\r\n      console.log(data);\r\n      dispatch({ type: 'LOGIN', payload: data.login })\r\n      window.location.href = '/'\r\n    },\r\n  })\r\n\r\n  const submitLoginForm = (e) => {\r\n    e.preventDefault()\r\n    console.log(loginForm);\r\n    loginUser({ variables: loginForm })\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Connexion\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={submitLoginForm}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Addresse mail\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            value={loginForm.email}\r\n            onChange={(e) =>\r\n              setLoginForm({ ...loginForm, email: e.target.value })\r\n            }\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Mot de passe\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={loginForm.password}\r\n            onChange={(e) =>\r\n              setLoginForm({ ...loginForm, password: e.target.value })\r\n            }\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Se connecter\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item>\r\n              <LinkRoute to=\"/register\">\r\n                <Link  variant=\"body2\">\r\n                  {\"Vous n'avez pas de compte ? Inscrivez vous\"}\r\n                </Link>\r\n              </LinkRoute>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\offline\\SignUp.js",["82","83"],"import React , { useState }from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link as LinkRoute } from \"react-router-dom\";\r\nimport { gql, useMutation } from '@apollo/client'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $name: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    register(input: {\r\n        name: $name\r\n        email: $email\r\n        password: $password\r\n      }\r\n    ) {\r\n      name\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nexport default function SignUp(props) {\r\n  const classes = useStyles();\r\n  const [registerForm, setRegisterForm] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  })\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update: (_, __) => props.history.push('/login'),\r\n    onError: (err) => setErrors(err?.graphQLErrors[0]?.extensions?.errors),\r\n  })\r\n\r\n  const submitRegisterForm = (e) => {\r\n    e.preventDefault()\r\n    registerUser({ variables : registerForm })\r\n  }\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={submitRegisterForm}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"name\"\r\n                name=\"name\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"name\"\r\n                label=\"Votre nom\"\r\n                autoFocus\r\n                value={registerForm.name}\r\n                onChange={(e) =>\r\n                  setRegisterForm({ ...registerForm, name: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Adresse mail\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={registerForm.email}\r\n                onChange={(e) =>\r\n                  setRegisterForm({ ...registerForm, email: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Mot de passe\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={registerForm.password}\r\n                onChange={(e) =>\r\n                  setRegisterForm({ ...registerForm, password: e.target.value })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n                <LinkRoute to=\"/login\">\r\n                    <Link variant=\"body2\">\r\n                        Already have an account? Sign in\r\n                    </Link>\r\n                </LinkRoute>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Chat.js",["84"],"import React, {  useEffect } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n\r\nimport { gql, useSubscription } from '@apollo/client'\r\nimport { useAuthDispatch, useAuthState } from '../context/auth'\r\nimport { useMessageDispatch } from '../context/message'\r\n\r\nimport Conversations from './Conversations';\r\nimport Users from './Users';\r\nimport Messages from './Messages';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n    },\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2),\r\n    paddingRight : drawerWidth+20\r\n  },\r\n}));\r\n\r\nconst NEW_MESSAGE = gql`\r\n  subscription newMessage {\r\n    newMessage {\r\n      id\r\n      userId\r\n      chatId\r\n      content\r\n      createdAt\r\n      user{\r\n        id\r\n        email\r\n      }\r\n      chat{\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Chat(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <Conversations />\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  const authDispatch = useAuthDispatch()\r\n  const messageDispatch = useMessageDispatch()\r\n\r\n  const { user } = useAuthState()\r\n\r\n  const { data: messageData, error: messageError } = useSubscription(\r\n    NEW_MESSAGE\r\n  )\r\n  \r\n  useEffect(() => {\r\n    if (messageError) console.log('messageError', messageError)\r\n\r\n    if (messageData) {\r\n      const message = messageData.newMessage\r\n\r\n      messageDispatch({\r\n        type: 'ADD_MESSAGE',\r\n        payload: {\r\n          id: message.chatId,\r\n          message,\r\n        },\r\n      })\r\n    }\r\n  }, [messageError, messageData])\r\n\r\n  const logout = () => {\r\n    authDispatch({ type: 'LOGOUT' })\r\n    window.location.href = '/login'\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Chat\r\n          </Typography>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            { user.name }\r\n          </Typography>\r\n            <IconButton color=\"secondary\" aria-label=\"delete\" onClick={logout}>\r\n                <PowerSettingsNewIcon />\r\n            </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n        anchor=\"right\"\r\n      ><div className={classes.toolbar} />\r\n      \r\n        <Users />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Messages />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\n","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Messages.js",["85","86","87","88"],"import React, {useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SendForm from './SendForm'\r\nimport Message from './Message'\r\nimport Members from './Members'\r\nimport { gql, useLazyQuery } from '@apollo/client'\r\nimport { useMessageDispatch, useMessageState } from '../context/message'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingBottom: '100px',\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nconst GET_MESSAGES = gql`\r\n  query messages($idChat: Int!) {\r\n    messages(idChat: $idChat) {\r\n      id\r\n      content\r\n      createdAt\r\n      user{\r\n        id\r\n        name\r\n        email\r\n      }\r\n    }\r\n  }\r\n  `\r\nexport default function Messages() {\r\n  const classes = useStyles();\r\n\r\n  const { conversations } = useMessageState()\r\n  const dispatch = useMessageDispatch()\r\n\r\n  const selectedConversation = conversations?.find((c) => c.selected === true)\r\n  const messages = selectedConversation?.messages\r\n  const [\r\n    getMessages,\r\n    { loading: messagesLoading, data: messagesData },\r\n  ] = useLazyQuery(GET_MESSAGES)\r\n\r\n  useEffect(() => {\r\n    if (selectedConversation) {\r\n      getMessages({ variables: { idChat: selectedConversation.id } })\r\n    }\r\n  }, [selectedConversation])\r\n\r\n \r\n  \r\n  useEffect(() => {\r\n    if (messagesData) {\r\n      dispatch({\r\n        type: 'SET_CONVERSATION_MESSAGES',\r\n        payload: {\r\n          id: selectedConversation.id,\r\n          messages: messagesData.messages,\r\n        },\r\n      })\r\n    }\r\n  }, [messagesData])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Members members={selectedConversation?.users} />\r\n      {\r\n        messages?.map((message, index) => < Message key={index} message={message} />)\r\n      }\r\n      <SendForm selectedConversation={selectedConversation} />\r\n    </div>\r\n  );\r\n}","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\SendForm.js",[],"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\ApolloProvider.js",[],"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\context\\auth.js",[],"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\guards\\GuardRoute.js",[],"E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Conversations.js",["89","90","91"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport { useMessageDispatch, useMessageState } from '../context/message'\r\n\r\nconst GET_CONVERSATIONS = gql`\r\n  query chats {\r\n    chats {\r\n      id\r\n      users {\r\n        id\r\n        name\r\n        email\r\n      }\r\n      messages{\r\n        id\r\n        content\r\n        user{\r\n          id\r\n          name\r\n          email\r\n        }\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function Conversations() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([1]);\r\n  const dispatch = useMessageDispatch()\r\n  const { conversations } = useMessageState()\r\n  const selectedConversation = conversations?.find((c) => c.selected === true)?.id\r\n\r\n  const { loading } = useQuery(GET_CONVERSATIONS, {\r\n    onCompleted: (data) => dispatch({ type: 'SET_CONVERSATIONS', payload: data.chats }),\r\n    onError: (err) => console.log(err),\r\n  })\r\n\r\n  return (\r\n    <List dense className={classes.root}>\r\n      {conversations?.map((conversation) => {\r\n        const labelId = `checkbox-list-secondary-label-${conversation.id}`;\r\n        const selected = selectedConversation === conversation.id\r\n        return (\r\n          <ListItem key={conversation.id} button\r\n          onClick={() =>\r\n            dispatch({ type: 'SET_SELECTED_CONVERSATION', payload: conversation.id })\r\n          }\r\n          selected={selected}>\r\n            <ListItemAvatar>\r\n              <Avatar\r\n                alt={`Avatar n°${conversation.id + 1}`}\r\n                src=\"\"\r\n              />\r\n            </ListItemAvatar>\r\n            <Grid container>\r\n              <Grid item xs={12}>\r\n                <ListItemText id={labelId} primary={`${conversation.users[0].name}`} />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <ListItemText id={labelId+'tt'} secondary={`${conversation.messages[conversation.messages?.length - 1]?.content || 'Envoyer un message...'}`} />\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\context\\message.js",["92"],"import React, { createContext, useReducer, useContext } from 'react'\r\n\r\nconst MessageStateContext = createContext()\r\nconst MessageDispatchContext = createContext()\r\n\r\nconst messageReducer = (state, action) => {\r\n  let conversationsCopy, conversationIndex,usersCopy\r\n  const { id, messages, message } = action.payload\r\n  switch (action.type) {\r\n    case 'SET_CONVERSATIONS':\r\n      return {\r\n        ...state,\r\n        conversations: action.payload,\r\n      }\r\n      case 'SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      }\r\n    case 'SET_CONVERSATION_MESSAGES':\r\n      conversationsCopy = [...state.conversations]\r\n\r\n      conversationIndex = conversationsCopy.findIndex((c) => c.id === id)\r\n\r\n      conversationsCopy[conversationIndex] = { ...conversationsCopy[conversationIndex], messages }\r\n\r\n      return {\r\n        ...state,\r\n        conversations: conversationsCopy,\r\n      }\r\n    case 'SET_SELECTED_CONVERSATION':\r\n        conversationsCopy = state.conversations.map((conversation) => ({\r\n        ...conversation,\r\n        selected: conversation.id === action.payload,\r\n      }))\r\n\r\n      return {\r\n        ...state,\r\n        conversations: conversationsCopy,\r\n      }\r\n      case 'SET_SELECTED_USER':\r\n        usersCopy = state.users.map((user) => ({\r\n        ...user,\r\n        selected: user.id === action.payload,\r\n      }))\r\n      conversationsCopy = [...state.conversations]\r\n\r\n      conversationIndex = conversationsCopy.findIndex((c) => c.users.map((u)=> u.id).length <= 2 && c.users.map((u)=> u.id).indexOf(action.payload) >= 0)\r\n      let isHere = conversationsCopy[conversationIndex]?.users.findIndex((u) => u.id == action.payload)\r\n      console.log(action.payload,conversationsCopy[conversationIndex]?.users)\r\n      if(conversationIndex >= 0 && isHere >= 0){\r\n        conversationsCopy = state.conversations.map((conversation) => ({\r\n          ...conversation,\r\n          selected: conversation.id === conversationsCopy[conversationIndex].id,\r\n        }))\r\n  \r\n        state =  {...state, conversations: conversationsCopy}\r\n        state = {...state, isNewChat: false}\r\n      }else{\r\n        state = {...state, isNewChat: true}\r\n        console.log('state',state)\r\n      }\r\n      \r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      }\r\n      case 'ADD_MESSAGE':\r\n        conversationsCopy = [...state.conversations]\r\n        conversationIndex = conversationsCopy.findIndex((c) => c.id === id)\r\n  \r\n        let newConversation = {\r\n          ...conversationsCopy[conversationIndex],\r\n          messages: conversationsCopy[conversationIndex].messages\r\n            ? [...conversationsCopy[conversationIndex].messages, message]\r\n            : null,\r\n          latestMessage: message,\r\n        }\r\n  \r\n        conversationsCopy[conversationIndex] = newConversation\r\n        \r\n        return {\r\n          ...state,\r\n          conversations: conversationsCopy,\r\n        }\r\n\r\n        case 'ADD_CONVERSATION':\r\n        action.payload.messages = action.payload.messages ? action.payload.messages : []\r\n        conversationsCopy = [...state.conversations]\r\n        conversationsCopy = [action.payload, ...conversationsCopy]\r\n        \r\n        conversationsCopy = conversationsCopy.map((conversation) => ({\r\n          ...conversation,\r\n          selected: conversation.id === action.payload.id,\r\n        }))\r\n\r\n        return {\r\n          ...state,\r\n          conversations: conversationsCopy,\r\n        }\r\n\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`)\r\n  }\r\n}\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(messageReducer, { conversations: null, users: null, isNewChat : false })\r\n\r\n  return (\r\n    <MessageDispatchContext.Provider value={dispatch}>\r\n      <MessageStateContext.Provider value={state}>\r\n        {children}\r\n      </MessageStateContext.Provider>\r\n    </MessageDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useMessageState = () => useContext(MessageStateContext)\r\nexport const useMessageDispatch = () => useContext(MessageDispatchContext)","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Message.js",["93","94","95"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { useAuthState } from '../context/auth'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function Message({message}) {\r\n  const classes = useStyles();\r\n  const { user } = useAuthState()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3} \r\n      justify={user.email == message.user.email ? \"flex-end\" : \"flex-start\"}>\r\n        <Grid item xs={8}>\r\n        <List>\r\n            <ListItem key={message.id}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <ListItemText \r\n                         align={user.email == message.user.email ? \"right\" : \"left\"}\r\n                         primary={\r\n                            <p>{message.content}</p>\r\n                        }></ListItemText>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ListItemText \r\n                        align={user.email == message.user.email ? \"right\" : \"left\"}\r\n                        secondary={message.createdAt}></ListItemText>\r\n                    </Grid>\r\n                </Grid>\r\n            </ListItem>\r\n        </List>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Members.js",["96","97"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Members({members}) {\r\n  const classes = useStyles();\r\n  const handleDelete = () => {\r\n    console.info('You clicked the delete icon.');\r\n  };\r\n\r\n  const handleClick = () => {\r\n    console.info('You clicked the Chip.');\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        {\r\n            members?.map((member, index)=>\r\n                                <Chip key={index}\r\n                                    icon={<FaceIcon />}\r\n                                    label={member.name}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                        )\r\n        }\r\n    </div>\r\n  );\r\n}","E:\\WORK_RACHID\\conf call\\fleex\\frontend\\src\\online\\Users.js",["98","99"],"import React, {useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { gql, useQuery, useMutation } from '@apollo/client'\r\nimport { useMessageDispatch, useMessageState } from '../context/message'\r\n\r\nconst GET_USERS = gql`\r\n  query users {\r\n    users {\r\n        id\r\n        name\r\n        email\r\n        isOnline\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst ADD_USER_TO_CHAT = gql`\r\n  mutation addUserToChat($idChat: Int!, $idUser: Int!) {\r\n    addUserToChat(idChat: $idChat, idUser: $idUser) {\r\n        id\r\n        users {\r\n          id\r\n          name\r\n          email\r\n        }\r\n        messages{\r\n          id\r\n          content\r\n          user{\r\n            id\r\n            name\r\n            email\r\n          }\r\n          createdAt\r\n        }\r\n    }\r\n  }\r\n`\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function Users() {\r\n  const classes = useStyles();\r\n  const dispatch = useMessageDispatch()\r\n  const { users, isNewChat } = useMessageState()\r\n  const selectedUser = users?.find((u) => u.selected === true)?.id\r\n\r\n  const { loading } = useQuery(GET_USERS, {\r\n    onCompleted: (data) => dispatch({ type: 'SET_USERS', payload: data.users }),\r\n    onError: (err) => console.log(err),\r\n  })\r\n  const [addUSerToChat] = useMutation(ADD_USER_TO_CHAT, {\r\n    onError: (err) => console.log(err),\r\n    onCompleted: (data) => dispatch({ type: 'ADD_CONVERSATION', payload: data.addUserToChat }),\r\n  })\r\n  useEffect(() => {\r\n    if (isNewChat) {\r\n      addUSerToChat({ variables: { idChat: 0, idUser: selectedUser} })\r\n    }\r\n  }, [isNewChat])\r\n\r\n  return (\r\n    <List dense className={classes.root}>\r\n      {users?.map((user) => {\r\n        const labelId = `checkbox-list-secondary-label-${user.id}`;\r\n        const selected = selectedUser === user.id\r\n        return (\r\n          <ListItem key={user.id} button\r\n          onClick={() =>\r\n            dispatch({ type: 'SET_SELECTED_USER', payload: user.id })\r\n          }\r\n          selected={selected}>\r\n            \r\n            <ListItemAvatar>\r\n            <Badge badgeContent={''} color=\"primary\" variant=\"dot\" invisible={!user.isOnline} >\r\n              <Avatar\r\n                alt={`Avatar n°${user.id + 1}`}\r\n                src=\"\"\r\n              />\r\n              </Badge>\r\n            </ListItemAvatar>\r\n            <ListItemText id={labelId} primary={`${user.name || 'User chat'}`} />\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":7,"column":3,"nodeType":"106","messageId":"107","endLine":7,"endColumn":8},{"ruleId":"104","severity":1,"message":"108","line":53,"column":10,"nodeType":"106","messageId":"107","endLine":53,"endColumn":16},{"ruleId":"104","severity":1,"message":"109","line":56,"column":23,"nodeType":"106","messageId":"107","endLine":56,"endColumn":30},{"ruleId":"104","severity":1,"message":"108","line":61,"column":10,"nodeType":"106","messageId":"107","endLine":61,"endColumn":16},{"ruleId":"104","severity":1,"message":"109","line":63,"column":26,"nodeType":"106","messageId":"107","endLine":63,"endColumn":33},{"ruleId":"110","severity":1,"message":"111","line":124,"column":6,"nodeType":"112","endLine":124,"endColumn":33,"suggestions":"113"},{"ruleId":"104","severity":1,"message":"114","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":35},{"ruleId":"104","severity":1,"message":"115","line":46,"column":16,"nodeType":"106","messageId":"107","endLine":46,"endColumn":31},{"ruleId":"110","severity":1,"message":"116","line":53,"column":6,"nodeType":"112","endLine":53,"endColumn":28,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":67,"column":6,"nodeType":"112","endLine":67,"endColumn":20,"suggestions":"119"},{"ruleId":"104","severity":1,"message":"120","line":44,"column":10,"nodeType":"106","messageId":"107","endLine":44,"endColumn":17},{"ruleId":"104","severity":1,"message":"121","line":44,"column":19,"nodeType":"106","messageId":"107","endLine":44,"endColumn":29},{"ruleId":"104","severity":1,"message":"109","line":49,"column":11,"nodeType":"106","messageId":"107","endLine":49,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":49,"column":86,"nodeType":"124","messageId":"125","endLine":49,"endColumn":88},{"ruleId":"122","severity":1,"message":"123","line":27,"column":27,"nodeType":"124","messageId":"125","endLine":27,"endColumn":29},{"ruleId":"122","severity":1,"message":"123","line":34,"column":44,"nodeType":"124","messageId":"125","endLine":34,"endColumn":46},{"ruleId":"122","severity":1,"message":"123","line":41,"column":43,"nodeType":"124","messageId":"125","endLine":41,"endColumn":45},{"ruleId":"104","severity":1,"message":"126","line":19,"column":9,"nodeType":"106","messageId":"107","endLine":19,"endColumn":21},{"ruleId":"104","severity":1,"message":"127","line":23,"column":9,"nodeType":"106","messageId":"107","endLine":23,"endColumn":20},{"ruleId":"104","severity":1,"message":"109","line":61,"column":11,"nodeType":"106","messageId":"107","endLine":61,"endColumn":18},{"ruleId":"110","severity":1,"message":"128","line":73,"column":6,"nodeType":"112","endLine":73,"endColumn":17,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messageDispatch'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'useState' is defined but never used.","'messagesLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedConversation.id'. Either include them or remove the dependency array.",["134"],"'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleDelete' is assigned a value but never used.","'handleClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addUSerToChat' and 'selectedUser'. Either include them or remove the dependency array.",["135"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [messageError, messageData, messageDispatch]",{"range":"144","text":"145"},"Update the dependencies array to be: [getMessages, selectedConversation]",{"range":"146","text":"147"},"Update the dependencies array to be: [dispatch, messagesData, selectedConversation.id]",{"range":"148","text":"149"},"Update the dependencies array to be: [addUSerToChat, isNewChat, selectedUser]",{"range":"150","text":"151"},[3011,3038],"[messageError, messageData, messageDispatch]",[1340,1362],"[getMessages, selectedConversation]",[1620,1634],"[dispatch, messagesData, selectedConversation.id]",[1991,2002],"[addUSerToChat, isNewChat, selectedUser]"]